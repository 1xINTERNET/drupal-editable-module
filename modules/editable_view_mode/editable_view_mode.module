<?php

/**
 * @file
 * Contains hooks and functions for editable_view_mode module.
 */

use Drupal\Core\Entity\Display\EntityDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Returns a string identifier for an entity
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @return string
 */
function _editable_view_mode_entity_identifier(EntityInterface $entity, $onlyType = FALSE) {
  $type = $entity->getEntityTypeId() . '--' . $entity->bundle();

  if ($onlyType) {
    return $type;
  }
  return $type . '/' . $entity->uuid();
}

/**
 * Sanitizes field definitions.
 *
 * Not to expose all field settings, remove unnecessary properties.
 *
 * @param array $field_definition
 *   Field definitions.
 *
 * @return array
 *   Modified field definitions
 */
function _editable_view_mode_sanitize_field_definition(array $field_definition) {
  $sanitized_definition = [];
  $allowed_properties = [
    'label',
    'required',
    'schema',
    'settings',
    'default_value',
    'description',
    'field_type',
  ];
  foreach ($field_definition as $key => $value) {
    if (in_array($key, $allowed_properties)) {
      $sanitized_definition[$key] = $field_definition[$key];
    }
  }
  return $sanitized_definition;
}

/**
 * Provide field definitions for given entity type and bundle.
 *
 * @param string $entity_type
 *   Entity type id.
 * @param string $bundle
 *   Entity bundle.
 *
 * @return array
 *   Serialized field definitions for given entity type and bundle.
 */
function _editable_view_mode_get_field_definitions($entity_type, $bundle) {
  $serialized_fields = [];
  $entityManager = \Drupal::service('entity_field.manager');
  $fields = $entityManager->getFieldDefinitions($entity_type, $bundle);
  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field */
  foreach ($fields as $field) {
    $base_field = clone $field;
    $fieldDefinition = [];
    if (method_exists($base_field, 'toArray')) {
      $fieldDefinition += $base_field->toArray();
    }
    if ($base_field instanceof FieldDefinitionInterface) {
      $base_field = $field->getFieldStorageDefinition();
      // Add target entity type to fields settings if it is entity reference.
      if ($base_field->getType() == 'entity_reference') {
        $base_field_array = $base_field->toArray();
        $fieldDefinition['settings'] += $base_field_array['settings'];
      }
    }
    $schema = [];
    if (method_exists($base_field, 'getSchema')) {
      $schema = $base_field->getSchema();
    }
    if (method_exists($base_field, 'getPropertyDefinitions')) {
      $property_definitions = $base_field->getPropertyDefinitions();
      /** @var \Drupal\Core\TypedData\DataDefinitionInterface $propery_definition */
      foreach ($property_definitions as $key => $property_definition) {
        if ($property_definition->isComputed()) {
          continue;
        }
        $fieldDefinition['schema'][$key] = $property_definition->toArray();
        if (!empty($schema['columns'][$key])) {
          $fieldDefinition['schema'][$key] += $schema['columns'][$key];
        }
      }
    }
    $fieldDefinition = _editable_view_mode_sanitize_field_definition($fieldDefinition);
    // Allow other modules to alter the field definition.
    \Drupal::moduleHandler()->alter('editable_field_definition', $fieldDefinition);
    $serialized_fields[$field->getName()] = $fieldDefinition;
  }
  return $serialized_fields;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function editable_view_mode_form_entity_view_display_edit_form_alter(&$form, FormStateInterface $form_state) {
  $form_state->loadInclude('editable_view_mode', 'inc', 'includes/field_ui');
  editable_view_mode_admin_ui($form, $form_state);
}

/**
 * Implements hook_entity_view_alter().
 */
function editable_view_mode_entity_view_alter(&$build, EntityInterface $entity, EntityDisplayInterface $display) {
  $status = $display->getThirdPartySetting('editable_view_mode', 'enabled');
  if ($status && $entity->access('update')) {
    // Attach the libraries for editable interface.
    $build['#attached']['library'][] = 'editable/production';
    // Provide the JSON API serialized entity into drupalSettings.
    $serialized_entity = \Drupal::service('jsonapi.entity.to_jsonapi')->normalize($entity);
    $entity_identifier = _editable_view_mode_entity_identifier($entity);
    $build['#attached']['drupalSettings']['editable']['entities'][$entity_identifier] = $serialized_entity;
    // Provide serialized field data for current entity type and bundle.
    $serialized_fields = _editable_view_mode_get_field_definitions($entity->getEntityTypeId(), $entity->bundle());
    $entity_type = _editable_view_mode_entity_identifier($entity, TRUE);
    $build['#attached']['drupalSettings']['editable']['entitySettings'][$entity_type] = $serialized_fields;
    // Check the serialized fields for entity references and add the field
    // settings to entitySettings.
    $entity_reference_definitions = [];
    foreach ($serialized_fields as $serialized_field) {
      if ($serialized_field['field_type'] == 'entity_reference') {
        if (!empty($serialized_field['settings']['handler_settings']['target_bundles'])) {
          foreach ($serialized_field['settings']['handler_settings']['target_bundles'] as $bundle) {
            $entity_reference_definitions[$serialized_field['settings']['target_type']][] = $bundle;
          }
        }
      }
    }
    if (!empty($entity_reference_definitions)) {
      foreach ($entity_reference_definitions as $entity_type => $bundles) {
        foreach ($bundles as $bundle) {
          $entity_identifier = $entity_type . '--' . $bundle;
          if (empty($build['#attached']['drupalSettings']['editable']['entitySettings'][$entity_identifier])) {
            $serialized_fields = _editable_view_mode_get_field_definitions($entity_type, $bundle);
            $build['#attached']['drupalSettings']['editable']['entitySettings'][$entity_identifier] = $serialized_fields;
          }
        }
      }
    }
    $build['#attributes']['data-editable-entity-id'] = $entity_identifier;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function editable_view_mode_preprocess_field(&$variables) {
  // Add editable attributes to the field rendered arrays.
  $variables['#cache']['contexts'][] = 'user.permissions';
  $element = $variables['element'];
  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  $entity = $element['#object'];
  $entity_identifier = _editable_view_mode_entity_identifier($entity);
  // If there is no access to update entity or entity is not in the
  // latest revision - exit.
  if (!$entity->access('update') || !$entity->isLatestRevision()) {
    return;
  }
  // Load current view display for the element.
  $view_mode_parts = [
    $element['#entity_type'],
    $element['#bundle'],
    $element['#view_mode'],
  ];
  $view_mode = implode('.', $view_mode_parts);
  /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
  $display = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load($view_mode);
  if (!$display) {
    // If no display found the "default" one is used. Try to load it.
    $view_mode_default_parts = [
      $element['#entity_type'],
      $element['#bundle'],
      'default',
    ];
    $view_mode = implode('.', $view_mode_default_parts);
    $display = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load($view_mode);
  }
  // If still no display or editable is not enabled skip preprocess.
  if ($display && $display->getThirdPartySetting('editable_view_mode', 'enabled')) {
    return;
  }

  // Fields that are computed fields are not editable.
  $definition = $entity->getFieldDefinition($element['#field_name']);
  if (!$definition->isComputed()) {
    $variables['attributes']['data-editable-field-id'] = $entity_identifier . '/' . $element['#field_name'] . '/' . $element['#language'] . '/' . $element['#view_mode'];
  }
}
